#version 430 core

layout(binding = 0, rgba32f) uniform writeonly image2D framebuffer;
uniform float time;
uniform vec3 eye;
uniform vec3 direction;

layout(local_size_x = 8, local_size_y = 8) in;
void main()
{
  // most basic compute shader. Can be used to verify that everything is set up correctly
  // on execute the shader will fill the entire buffer with a single color

  ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(framebuffer);
  // discard points outside texture
  if (pos.x >= size.x || pos.y >= size.y)
  {
    return;
  }
  // Normalized pixel coordinates (from 0 to 1)
  vec2 uv = pos/size;
  // Time varying pixel color
  vec3 col = 0.5 + 0.5 * cos(time + uv.xyx + vec3(0,2,4));
  imageStore(framebuffer, pos, vec4(col, 1));
}
